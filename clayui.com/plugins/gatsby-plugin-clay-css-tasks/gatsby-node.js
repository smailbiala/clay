/**
 * SPDX-FileCopyrightText: Â© 2018 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */

const fs = require('fs');
const path = require('path');
const sass = require('sass');
const sassdoc = require('sassdoc');

const aliases = require('./clay-icon-aliases');

// For autogenerated files in `/static/js`

const buildJson = (array, aliasesMap) => {
	let json = '[\n';

	for (let i = 0; i < array.length; i++) {
		let aliases = aliasesMap[array[i]];

		json += '    {\n';
		json += `        "name": "${array[i]}",\n`;
		json += '        "aliases": [';

		if (!aliases) {
			aliases = '""';
		}

		json += `${aliases}]\n`;

		if (i === array.length - 1) {
			json += '    }\n';
		} else {
			json += '    },\n';
		}
	}

	json += ']';

	return json;
};

// Compiles SVG icons in directory `clay-css/src/images/icons` into
// `static/images/icons/icons.svg` spritemap. This also autogenerates
// `static/js/flags-autogenerated.json` and `static/js/icons-autogenerated.json`
// used for search in `icons.html`.

const generateFiles = ({reporter}, pluginOptions) => {
	const iconsActivity = reporter.activityTimer(`Compiling icons.svg`);

	iconsActivity.start();

	const REGEX_FILE_EXT_SVG = /(?:flags-|\.svg$)/g;
	const REGEX_HTML_COMMENTS = /<!--(?:.+?)-->\n?/gs;
	const REGEX_SVG_TAG = /(?:<\/svg|<svg[^>]+)>(?:\n|)/g;
	const REGEX_SVG_VIEWBOX = /\bviewBox="[^"]+"/g;

	const filesArr = fs.readdirSync(pluginOptions.clayCssSrcIcons);

	const flagIconsArr = [];
	const svgIconsArr = [];

	let strSprite = `<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">`;

	filesArr.forEach((file) => {
		let icon = fs
			.readFileSync(
				path.join(pluginOptions.clayCssSrcIcons, file),
				'utf8'
			)
			.toString();

		const id = file.replace(REGEX_FILE_EXT_SVG, '').toLowerCase();

		const viewBox = icon.match(REGEX_SVG_VIEWBOX);

		try {
			if (!viewBox) {
				throw `Viewbox attribute not found for icon: ${id}`;
			}
		} catch (error) {
			console.warn(error);
		}

		const symbol = `<symbol id="${id}" ${viewBox}>`;

		icon = icon.replace(REGEX_HTML_COMMENTS, '');
		icon = icon.replace(REGEX_SVG_TAG, '');

		strSprite += `${symbol}${icon}</symbol>`;

		// For autogenerate files

		if (aliases.flagsData[id]) {
			flagIconsArr.push(id);
		} else {
			svgIconsArr.push(id);
		}
	});

	strSprite += '</svg>';

	fs.writeFileSync(
		path.join(pluginOptions.clayuiStatic, 'images', 'icons', 'icons.svg'),
		strSprite
	);

	fs.writeFileSync(
		path.join(pluginOptions.clayuiStatic, 'js', 'flags-autogenerated.json'),
		buildJson(flagIconsArr, aliases.flagsData)
	);

	fs.writeFileSync(
		path.join(pluginOptions.clayuiStatic, 'js', 'icons-autogenerated.json'),
		buildJson(svgIconsArr, aliases.iconsData)
	);

	iconsActivity.end();
};

// Compiles and writes `atlas.css` and `base.css` files to `/static/css/`

const generateCSSFiles = ({reporter}, pluginOptions, files) => {
	const activity = reporter.activityTimer(`Compiling ${files}`);

	activity.start();

	const cssDir = path.join(pluginOptions.clayuiStatic, 'css');
	const scssDir = path.join(pluginOptions.clayCssSrc, 'scss');
	const clayuiSrcDir = path.join(pluginOptions.clayuiSrc, 'styles');

	files.forEach((file) => {
		let fileName = file;

		if (
			fileName === 'atlas.scss' ||
			fileName === 'base.scss' ||
			fileName === 'cadmin.scss'
		) {
			fileName = `dart-sass-${fileName}`;
		}
		const cssFile = sass.renderSync({
			data: null,
			file: path.join(clayuiSrcDir, `${fileName}`),
			includePaths: [scssDir],
			outFile: path.join(cssDir, file),
			outputStyle: 'compressed',
			sourceMap: true,
			sourceMapContents: true,
		});

		fs.writeFileSync(
			path.join(cssDir, file.replace(/\.scss/, '.css')),
			cssFile.css.toString()
		);

		fs.writeFileSync(
			path.join(cssDir, file.replace(/\.scss/, '.css.map')),
			cssFile.map.toString()
		);
	});

	activity.end();
};

const generateSassDocs = async ({reporter}, pluginOptions) => {
	const sassDocsActivity = reporter.activityTimer(`Generating Sass Docs`);

	sassDocsActivity.start();

	const pjson = require('../../package.json');

	var config = {
		dest: path.join(pluginOptions.clayuiStatic, 'sass-api'),
		// theme: path.join(__dirname, 'sassdoc-theme-clay-css'),
		groups: {
			alerts: 'Alerts',
			applicationBar: 'Application Bar',
			aspectRatio: 'Aspect Ratio',
			badges: 'Badges',
			breadcrumbs: 'Breadcrumbs',
			breakpoints: 'Breakpoints',
			bs4overwrites: 'Bootstrap 4 Overwrites',
			buttons: 'Buttons',
			cards: 'Cards',
			caret: 'Caret',
			clearfix: 'Clearfix',
			customForms: 'Custom Forms',
			drilldown: 'Drilldown',
			dropdowns: 'Dropdowns',
			float: 'Float',
			forms: 'Forms',
			globals: 'Globals',
			gradients: 'Gradients',
			grid: 'Grid',
			hover: 'Hover',
			image: 'Image',
			inputGroups: 'Input Groups',
			labels: 'Labels',
			lineClamp: 'Line Clamp',
			links: 'Links',
			listGroup: 'List Group',
			loaders: 'Loaders',
			managementBar: 'Management Bar',
			menubar: 'Menubar',
			modals: 'Modals',
			multiStepNav: 'Multi Step Nav',
			nav: 'Nav',
			navbar: 'Navbar',
			navigationBar: 'Navigation Bar',
			pagination: 'Pagination',
			panels: 'Panels',
			popovers: 'Popovers',
			progressBars: 'Progress Bars',
			quickAction: 'Quick Action',
			sheet: 'Sheet',
			sideNavigation: 'Side Navigation',
			sidebar: 'Sidebar',
			slideout: 'Slideout',
			stickers: 'Stickers',
			tables: 'Tables',
			tbar: 'Tbar',
			timelines: 'Timelines',
			toggleSwitch: 'Toggle Switch',
			tooltip: 'Tooltip',
			type: 'Type',
			undefined: 'Clay CSS',
			utilities: 'Utilities',
			vendorPrefixes: 'Vendor Prefixes',
		},
		package: {
			description: pjson.description,
			homepage: path.join('..', 'docs', 'get-started', 'index.html'),
			license: pjson.license,
			title: 'Clay CSS',
			version: pjson.version,
		},
	};

	await sassdoc(path.join(pluginOptions.clayCssSrc, 'scss'), config);

	sassDocsActivity.end();
};

exports.onPostBootstrap = async ({reporter}, pluginOptions) => {
	generateFiles({reporter}, pluginOptions);

	generateCSSFiles({reporter}, pluginOptions, [
		'atlas.scss',
		'colors.scss',
		'base.scss',
		'cadmin.scss',
		'colors-base.scss',
	]);

	await generateSassDocs({reporter}, pluginOptions);
};

exports.onCreateDevServer = ({reporter}, pluginOptions) => {
	const watcher = require('chokidar').watch([
		pluginOptions.clayCssSrc,
		path.join(pluginOptions.clayuiSrc, 'styles'),
	]);

	function modified(dir) {
		if (dir.match(/clay-css\/src\/images\/icons/)) {
			generateFiles({reporter}, pluginOptions);
		}

		if (
			dir.match(/clay-css\/src\/scss\/_components.scss/) ||
			dir.match(/clay-css\/src\/scss\/atlas-variables.scss/) ||
			dir.match(/clay-css\/src\/scss\/atlas.scss/) ||
			dir.match(/clay-css\/src\/scss\/atlas/) ||
			dir.match(/clay-css\/src\/scss\/components/) ||
			dir.match(/clay-css\/src\/scss\/functions/) ||
			dir.match(/clay-css\/src\/scss\/mixins/) ||
			dir.match(/clay-css\/src\/scss\/variables/)
		) {
			generateCSSFiles({reporter}, pluginOptions, [
				'atlas.scss',
				'colors.scss',
			]);
		}

		if (
			dir.match(/clay-css\/src\/scss\/_components.scss/) ||
			dir.match(/clay-css\/src\/scss\/base-variables.scss/) ||
			dir.match(/clay-css\/src\/scss\/base.scss/) ||
			dir.match(/clay-css\/src\/scss\/components/) ||
			dir.match(/clay-css\/src\/scss\/functions/) ||
			dir.match(/clay-css\/src\/scss\/mixins/) ||
			dir.match(/clay-css\/src\/scss\/variables/)
		) {
			generateCSSFiles({reporter}, pluginOptions, [
				'base.scss',
				'colors-base.scss',
			]);
		}

		if (
			dir.match(/clay-css\/src\/scss\/cadmin/) ||
			dir.match(/clay-css\/src\/scss\/functions/) ||
			dir.match(/clay-css\/src\/scss\/mixins/)
		) {
			generateCSSFiles({reporter}, pluginOptions, ['cadmin.scss']);
		}
	}

	watcher.on(`ready`, () => {
		watcher
			.on(`add`, (path) => modified(path))
			.on(`change`, (path) => modified(path))
			.on(`unlink`, (path) => modified(path));
	});
};
